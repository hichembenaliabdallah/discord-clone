generator client {
  provider = "prisma-client-js"
}
// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique
  name           String
  email          String   @db.Text
  imageUrl       String   @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  serverSelected Server[]
  members        Member[]
  channels      Channel[]
}

model Server {
  id String @id @default(uuid())

  name String

  imageUrl   String   @db.Text
  inviteCode String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members   Member[]
  channels  Channel[]
  @@index([profileId])
}

enum MemberRole {
  ADMIN
  GUEST
  MODERATOR
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel{
      id String @id @default(uuid())

  name String
    type        ChannelType         @default(TEXT)
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([profileId])
  @@index([serverId])
}